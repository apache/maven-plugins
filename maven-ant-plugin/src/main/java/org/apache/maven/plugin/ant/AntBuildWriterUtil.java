package org.apache.maven.plugin.ant;

/*
 * Copyright 2006 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.StringTokenizer;

import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.maven.artifact.Artifact;
import org.apache.maven.model.Plugin;
import org.apache.maven.project.MavenProject;
import org.apache.maven.wagon.PathUtils;
import org.apache.xpath.XPathAPI;
import org.apache.xpath.objects.XObject;
import org.codehaus.plexus.util.StringInputStream;
import org.codehaus.plexus.util.StringUtils;
import org.codehaus.plexus.util.xml.XMLWriter;
import org.codehaus.plexus.util.xml.Xpp3Dom;
import org.w3c.dom.Document;

/**
 * Utility class for the <code>AntBuildWriter</code> class.
 *
 * @author <a href="mailto:vincent.siveton@gmail.com">Vincent Siveton</a>
 * @version $Id$
 */
public class AntBuildWriterUtil
{
    /**
     * @param compileSourceRoots
     * @return not null list
     */
    public static List removeEmptyCompileSourceRoots( List compileSourceRoots )
    {
        List newCompileSourceRootsList = new ArrayList();
        if ( compileSourceRoots != null )
        {
            // copy as I may be modifying it
            for ( Iterator i = compileSourceRoots.iterator(); i.hasNext(); )
            {
                String srcDir = (String) i.next();
                if ( new File( srcDir ).exists() )
                {
                    newCompileSourceRootsList.add( srcDir );
                }
            }
        }

        return newCompileSourceRootsList;
    }

    /**
     * Convenience method to write <code>&lt;include/&gt;</code> and <code>&lt;exclude/&gt;</code>
     *
     * @param writer not null
     * @param includes
     * @param excludes
     */
    public static void writeIncludesExcludes( XMLWriter writer, List includes, List excludes )
    {
        if ( includes != null )
        {
            for ( Iterator i = includes.iterator(); i.hasNext(); )
            {
                String include = (String) i.next();
                writer.startElement( "include" );
                writer.addAttribute( "name", include );
                writer.endElement(); // include
            }
        }
        if ( excludes != null )
        {
            for ( Iterator i = excludes.iterator(); i.hasNext(); )
            {
                String exclude = (String) i.next();
                writer.startElement( "exclude" );
                writer.addAttribute( "name", exclude );
                writer.endElement(); // exclude
            }
        }
    }

    /**
     * Write comments in the Ant build file header
     *
     * @param writer
     */
    public static void writeHeader( XMLWriter writer )
    {
        writeAntVersionHeader( writer );

        writeCommentLineBreak( writer );
        writeComment( writer, StringUtils.repeat( "=", 21 ) + " - DO NOT EDIT THIS FILE! - "
            + StringUtils.repeat( "=", 21 ) );
        writeCommentLineBreak( writer );
        writeComment( writer, " " );
        writeComment( writer, "Any modifications will be overwritten." );
        writeComment( writer, " " );
        DateFormat dateFormat = DateFormat.getDateTimeInstance( DateFormat.SHORT, DateFormat.SHORT, Locale.US );
        writeComment( writer, "Generated by Maven Ant Plugin on "
            + dateFormat.format( new Date( System.currentTimeMillis() ) ) );
        writeComment( writer, "See: http://maven.apache.org/plugins/maven-ant-plugin/" );
        writeComment( writer, " " );
        writeCommentLineBreak( writer );

        writeLineBreak( writer );
    }

    /**
     * Write comment for the Ant supported version
     *
     * @param writer
     */
    public static void writeAntVersionHeader( XMLWriter writer )
    {
        writeCommentText( writer, "Ant build file (http://ant.apache.org/) for Ant 1.6.2 or above.",
                                             0 );
    }

    /**
     * Convenience method to write one <code>CRLF</code>
     *
     * @param writer not null writer
     */
    public static void writeLineBreak( XMLWriter writer )
    {
        writeLineBreak( writer, 1 );
    }

    /**
     * Convenience method to repeat <code>CRLF</code>
     *
     * @param writer not null
     * @param repeat
     */
    public static void writeLineBreak( XMLWriter writer, int repeat )
    {
        for ( int i = 0; i < repeat; i++ )
        {
            writer.writeMarkup( "\n" );
        }
    }

    /**
     * Convenience method to repeat <code>CRLF</code> and to indent the writer
     *
     * @param writer not null
     * @param repeat
     * @param indent postive number
     */
    public static void writeLineBreak( XMLWriter writer, int repeat, int indent )
    {
        writeLineBreak( writer, repeat );

        if ( indent < 0 )
        {
            indent = 0;
        }

        writer.writeText( StringUtils.repeat( " ", indent * AntBuildWriter.DEFAULT_INDENTATION_SIZE ) );
    }

    /**
     * Convenience method to write XML comment line break. Its size is 80.
     *
     * @param writer not null
     */
    public static void writeCommentLineBreak( XMLWriter writer )
    {
        writer.writeMarkup( "<!-- " + StringUtils.repeat( "=", 70 ) + " -->\n" );
    }

    /**
     * Convenience method to write XML comment line. The <code>comment</code> is splitted to have a size of 80.
     *
     * @param writer not null
     * @param comment
     */
    public static void writeComment( XMLWriter writer, String comment )
    {
        if ( comment == null )
        {
            comment = "null";
        }

        String[] words = StringUtils.split( comment, " " );

        StringBuffer line = new StringBuffer( "<!-- " );
        for ( int i = 0; i < words.length; i++ )
        {
            String[] sentences = StringUtils.split( words[i], "\n" );
            if ( sentences.length > 1 )
            {
                for ( int j = 0; j < sentences.length - 1; j++ )
                {
                    line.append( sentences[j] ).append( ' ' );
                    line.append( StringUtils.repeat( " ", 76 - line.length() ) ).append( "-->" ).append( '\n' );
                    writer.writeMarkup( line.toString() );
                    line = new StringBuffer( "<!-- " );
                }
                line.append( sentences[sentences.length - 1] ).append( ' ' );
            }
            else
            {
                StringBuffer sentenceTmp = new StringBuffer( line.toString() );
                sentenceTmp.append( words[i] ).append( ' ' );
                if ( sentenceTmp.length() > 76 )
                {
                    line.append( StringUtils.repeat( " ", 76 - line.length() ) ).append( "-->" ).append( '\n' );
                    writer.writeMarkup( line.toString() );
                    line = new StringBuffer( "<!-- " );
                    line.append( words[i] ).append( ' ' );
                }
                else
                {
                    line.append( words[i] ).append( ' ' );
                }
            }
        }
        if ( line.length() <= 76 )
        {
            line.append( StringUtils.repeat( " ", 76 - line.length() ) ).append( "-->" ).append( '\n' );
        }
        writer.writeMarkup( line.toString() );
    }

    /**
     * Convenience method to write XML comment between two comment line break. The XML comment block is also indented.
     *
     * @param writer not null
     * @param comment
     * @param indent
     */
    public static void writeCommentText( XMLWriter writer, String comment, int indent )
    {
        if ( indent < 0 )
        {
            indent = 0;
        }

        writeLineBreak( writer, 1 );

        writer.writeMarkup( StringUtils.repeat( " ", indent * AntBuildWriter.DEFAULT_INDENTATION_SIZE ) );
        writeCommentLineBreak( writer );

        writer.writeMarkup( StringUtils.repeat( " ", indent * AntBuildWriter.DEFAULT_INDENTATION_SIZE ) );
        writeComment( writer, comment );

        writer.writeMarkup( StringUtils.repeat( " ", indent * AntBuildWriter.DEFAULT_INDENTATION_SIZE ) );
        writeCommentLineBreak( writer );

        writeLineBreak( writer, 1, indent );
    }

    /**
     * Convenience method to write XML ant task
     *
     * @param writer not null
     * @param project not null
     * @param moduleSubPath not null
     * @param tasks not null
     */
    public static void writeAntTask( XMLWriter writer, MavenProject project, String moduleSubPath, String tasks )
    {
        writer.startElement( "ant" );
        writer.addAttribute( "antfile", "build.xml" );
        writer.addAttribute( "dir", PathUtils.toRelative( project.getBasedir(), moduleSubPath ) );
        writer.addAttribute( "target", tasks );
        writer.endElement(); // ant
    }

    /**
     * Convenience method to write XML jar task
     *
     * @param writer not null
     * @param project not null
     * @throws IOException if any
     */
    public static void writeJarTask( XMLWriter writer, MavenProject project )
        throws IOException
    {
        writer.startElement( "jar" );
        writer.addAttribute( "jarfile", "${maven.build.dir}/${maven.build.finalName}.jar" );
        addWrapAttribute( writer, "jar", "compress", getMavenJarPluginConfiguration( project, "archive//compress",
                                                                                     "true" ), 3 );
        addWrapAttribute( writer, "jar", "index", getMavenJarPluginConfiguration( project, "archive//index", "false" ),
                          3 );
        if ( getMavenJarPluginConfiguration( project, "archive//manifestFile", null ) != null )
        {
            addWrapAttribute( writer, "jar", "manifest",
                              getMavenJarPluginConfiguration( project, "archive//manifestFile", null ), 3 );
        }
        addWrapAttribute( writer, "jar", "basedir", "${maven.build.outputDir}", 3 );
        addWrapAttribute( writer, "jar", "excludes", "**/package.html", 3 );
        if ( getMavenJarPluginConfiguration( project, "archive//manifest", null ) != null )
        {
            writer.startElement( "manifest" );
            writer.startElement( "attribute" );
            writer.addAttribute( "name", "Main-Class" );
            addWrapAttribute( writer, "attribute", "value",
                              getMavenJarPluginConfiguration( project, "archive//manifest//mainClass", null ), 5 );
            writer.endElement(); // attribute
            writer.endElement(); // manifest
        }
        writer.endElement(); // jar
    }

    /**
     * Convenience method to write XML ear task
     *
     * @param writer not null
     * @param project not null
     * @throws IOException if any
     */
    public static void writeEarTask( XMLWriter writer, MavenProject project )
        throws IOException
    {
        writeCopyLib( writer, project, "${maven.build.dir}/${maven.build.finalName}" );

        writer.startElement( "ear" );
        writer.addAttribute( "destfile", "${maven.build.dir}/${maven.build.finalName}.ear" );
        addWrapAttribute( writer, "ear", "basedir", "${maven.build.dir}/${maven.build.finalName}", 3 );
        addWrapAttribute( writer, "ear", "compress", getMavenEarPluginConfiguration( project, "archive//compress",
                                                                                     "true" ), 3 );
        addWrapAttribute( writer, "ear", "includes ", getMavenEarPluginConfiguration( project, "includes", null ), 3 );
        addWrapAttribute( writer, "ear", "excludes", getMavenEarPluginConfiguration( project, "excludes", null ), 3 );
        if ( getMavenEarPluginConfiguration( project, "applicationXml", null ) != null )
        {
            addWrapAttribute( writer, "ear", "appxml",
                              getMavenEarPluginConfiguration( project, "applicationXml", null ), 3 );
        }
        else
        {
            // Generated appxml
            addWrapAttribute( writer, "ear", "appxml", "${maven.build.dir}/application.xml", 3 );
        }
        if ( getMavenEarPluginConfiguration( project, "manifestFile", null ) != null )
        {
            addWrapAttribute( writer, "ear", "manifest",
                              getMavenEarPluginConfiguration( project, "manifestFile", null ), 3 );
        }
        writer.endElement(); // ear
    }

    /**
     * Convenience method to write XML war task
     *
     * @param writer not null
     * @param project not null
     * @param localRepository not null
     * @throws IOException if any
     */
    public static void writeWarTask( XMLWriter writer, MavenProject project, File localRepository )
        throws IOException
    {
        writeCopyLib( writer, project, "${maven.build.dir}/${maven.build.finalName}/WEB-INF/lib" );

        writer.startElement( "war" );
        writer.addAttribute( "destfile", "${maven.build.dir}/${maven.build.finalName}.war" );
        addWrapAttribute( writer, "war", "basedir", "${maven.build.outputDir}", 3 );
        addWrapAttribute( writer, "war", "compress", getMavenWarPluginConfiguration( project, "archive//compress",
                                                                                     "true" ), 3 );
        if ( getMavenWarPluginConfiguration( project, "webXml", null ) != null )
        {
            addWrapAttribute( writer, "war", "webxml", getMavenWarPluginConfiguration( project, "webXml", null ), 3 );
        }
        else
        {
            // Default
            addWrapAttribute( writer, "war", "webxml", "${basedir}/src/main/webapp/WEB-INF/web.xml", 3 );
        }
        if ( getMavenWarPluginConfiguration( project, "manifestFile", null ) != null )
        {
            addWrapAttribute( writer, "war", "manifest",
                              getMavenWarPluginConfiguration( project, "manifestFile", null ), 3 );
        }
        writer.startElement( "lib" );
        writer.addAttribute( "dir", "${maven.build.dir}/${maven.build.finalName}/WEB-INF/lib" );
        writer.endElement(); // lib
        writer.startElement( "classes" );
        writer.addAttribute( "dir", "${maven.build.outputDir}" );
        writer.endElement(); // classes
        writer.startElement( "webinf" );
        writer.addAttribute( "dir", "${basedir}/src/main/webapp/WEB-INF" );
        addWrapAttribute( writer, "webinf", "excludes", "web.xml", 4 );
        writer.endElement(); // webinf
        writer.startElement( "fileset" );
        writer.addAttribute( "dir", "${basedir}/src/main/webapp" );
        writer.endElement(); // fileset
        writer.endElement(); // war
    }

    /**
     * Convenience method to wrap long element tags for a given attribute.
     *
     * @param writer not null
     * @param tag not null
     * @param name not null
     * @param value not null
     * @param indent positive value
     */
    public static void addWrapAttribute( XMLWriter writer, String tag, String name, String value, int indent )
    {
        if ( StringUtils.isEmpty( value ) )
        {
            return;
        }

        if ( indent < 0 )
        {
            writer.addAttribute( name, value );
        }
        else
        {
            writer.addAttribute( "\n"
                + StringUtils.repeat( " ", ( StringUtils.isEmpty( tag ) ? 0 : tag.length() ) + indent
                    * AntBuildWriter.DEFAULT_INDENTATION_SIZE ) + name, value );
        }
    }

    /**
     * @param mavenProject not null
     * @return true if project packaging equals <code>pom</code>
     */
    public static boolean isPomPackaging( MavenProject mavenProject )
    {
        return mavenProject.getPackaging().toLowerCase().equals( "pom" );
    }

    /**
     * @param mavenProject not null
     * @return true if project packaging equals <code>jar</code> or <code>maven-plugin</code>
     */
    public static boolean isJarPackaging( MavenProject mavenProject )
    {
        return mavenProject.getPackaging().toLowerCase().equals( "jar" )
            || mavenProject.getPackaging().toLowerCase().equals( "ejb" )
            || mavenProject.getPackaging().toLowerCase().equals( "maven-plugin" );
    }

    /**
     * @param mavenProject
     * @return true if project packaging equals <code>ear</code>
     */
    public static boolean isEarPackaging( MavenProject mavenProject )
    {
        return mavenProject.getPackaging().toLowerCase().equals( "ear" );
    }

    /**
     * @param mavenProject not null
     * @return true if project packaging equals <code>war</code>
     */
    public static boolean isWarPackaging( MavenProject mavenProject )
    {
        return mavenProject.getPackaging().toLowerCase().equals( "war" );
    }

    /**
     * Return the optionName value defined in a project for the "maven-compiler-plugin" plugin.
     *
     * @param project not null
     * @param optionName
     * @param defaultValue
     * @return the value for the option name (comma separated value in the case of list) or null if not found
     * @throws IOException if any
     */
    public static String getMavenCompilerPluginConfiguration( MavenProject project, String optionName,
                                                             String defaultValue )
        throws IOException
    {
        return getMavenPluginConfiguration( project, "maven-compiler-plugin", optionName, defaultValue );
    }

    /**
     * Return the optionName value defined in a project for the "maven-jar-plugin" plugin.
     *
     * @param project not null
     * @param optionName
     * @param defaultValue
     * @return the value for the option name (comma separated value in the case of list) or null if not found
     * @throws IOException if any
     */
    public static String getMavenJarPluginConfiguration( MavenProject project, String optionName, String defaultValue )
        throws IOException
    {
        return getMavenPluginConfiguration( project, "maven-jar-plugin", optionName, defaultValue );
    }

    /**
     * Return the optionName value defined in a project for the "maven-ear-plugin" plugin.
     *
     * @param project not null
     * @param optionName
     * @param defaultValue
     * @return the value for the option name (comma separated value in the case of list) or null if not found
     * @throws IOException if any
     */
    public static String getMavenEarPluginConfiguration( MavenProject project, String optionName, String defaultValue )
        throws IOException
    {
        return getMavenPluginConfiguration( project, "maven-ear-plugin", optionName, defaultValue );
    }

    /**
     * Return the optionName value defined in a project for the "maven-war-plugin" plugin.
     *
     * @param project not null
     * @param optionName
     * @param defaultValue
     * @return the value for the option name (comma separated value in the case of list) or null if not found
     * @throws IOException if any
     */
    public static String getMavenWarPluginConfiguration( MavenProject project, String optionName, String defaultValue )
        throws IOException
    {
        return getMavenPluginConfiguration( project, "maven-war-plugin", optionName, defaultValue );
    }

    // ----------------------------------------------------------------------
    // Convenience methods
    // ----------------------------------------------------------------------

    /**
     * Return the optionName value defined in a project for a given artifactId plugin.
     *
     * @param project not null
     * @param pluginArtifact not null
     * @param optionName an Xpath expression from the plugin <code>&lt;configuration/&gt;</code>
     * @param defaultValue
     * @return the value for the option name (comma separated value in the case of list) or null if not found
     * @throws IOException if any
     */
    private static String getMavenPluginConfiguration( MavenProject project, String pluginArtifact, String optionName,
                                                      String defaultValue )
        throws IOException
    {
        for ( Iterator it = project.getModel().getBuild().getPlugins().iterator(); it.hasNext(); )
        {
            Plugin plugin = (Plugin) it.next();

            if ( ( plugin.getGroupId().equals( "org.apache.maven.plugins" ) )
                && ( plugin.getArtifactId().equals( pluginArtifact ) ) )
            {
                Xpp3Dom pluginConf = (Xpp3Dom) plugin.getConfiguration();

                if ( pluginConf != null )
                {
                    StringBuffer sb = new StringBuffer();
                    try
                    {
                        Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder()
                            .parse( new StringInputStream( pluginConf.toString() ) );

                        XObject obj = XPathAPI.eval( doc, "//configuration//" + optionName );

                        if ( StringUtils.isNotEmpty( obj.toString() ) )
                        {
                            StringTokenizer token = new StringTokenizer( obj.toString(), "\n " );
                            while ( token.hasMoreTokens() )
                            {
                                sb.append( token.nextToken().trim() );
                                if ( token.hasMoreElements() )
                                {
                                    sb.append( "," );
                                }
                            }
                            return sb.toString();
                        }
                    }
                    catch ( Exception e )
                    {
                        throw new IOException( "Exception occured" + e.getMessage() );
                    }
                }
            }
        }

        return defaultValue;
    }

    /**
     * Write copy tasks in an outputDir for EAR and WAR targets for project depencies without
     * <code>provided</code> or <code>test</code> as scope
     *
     * @param writer not null
     * @param project not null
     * @param outputDir not null
     */
    private static void writeCopyLib( XMLWriter writer, MavenProject project, String outputDir )
    {
        writer.startElement( "mkdir" );
        writer.addAttribute( "dir", outputDir );
        writer.endElement(); // mkdir

        if ( !project.getDependencyArtifacts().isEmpty() )
        {
            for ( Iterator i = project.getDependencyArtifacts().iterator(); i.hasNext(); )
            {
                Artifact artifact = (Artifact) i.next();

                if ( !artifact.getScope().equals( Artifact.SCOPE_PROVIDED )
                    && !artifact.getScope().equals( Artifact.SCOPE_TEST ) )
                {
                    writer.startElement( "copy" );
                    writer.addAttribute( "file", artifact.getFile().getPath() );
                    addWrapAttribute( writer, "copy", "todir", outputDir, 3 );
                    writer.endElement(); // copy
                }
            }
        }
    }
}
