 ------
 Multimodule Configuration
 ------
 July 2006
 ------

~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/doxia/references/apt-format.html


Multimodule Configuration

  Configuring the Checkstyle plugin for use within large multimodule projects can be done, but will require a little setup.

  This example will use a mysterious project called 'whizbang'.

+-----+
whizbang
|-- pom.xml
|-- core
|   `-- pom.xml
|-- gui
|   `-- pom.xml
|-- jmx
|   `-- pom.xml
`-- src
+-----+

  First, setup a sub project to house your build tools.

+-----+
whizbang
|-- pom.xml
|-- build-tools
|   `-- pom.xml
|-- core
|   `-- pom.xml
|-- gui
|   `-- pom.xml
|-- jmx
|   `-- pom.xml
`-- src
+-----+

  Next, include the resources you want in the build-tools jar file. In this example, the build-tools jar will contain the
  resources, such as the config files, for the Checkstyle and PMD plugin configuration.

+-----+
whizbang
|-- pom.xml
|-- build-tools
|   |-- src
|   |   `-- main
|   |       `-- resources
|   |           `-- whizbang
|   |               |-- checkstyle.xml
|   |               |-- pmd.xml
|   |               `-- LICENSE.TXT
|   `-- pom.xml
|-- core
|-- gui
|-- jmx
`-- src
+-----+

  <<TIP:>> put the resources into a subdirectory that you can ensure will be unique, and not conflict with anyone else.

  Now, include the Checkstyle configuration in the top level <<<pom.xml>>>:

+-----+
<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example.whizbang</groupId>
  <artifactId>whizbang-parent</artifactId>
  <version>1.0</version>
  <packaging>pom</packaging>
  <name>WhizBang Parent</name>
  <reporting>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <configuration>
          <configLocation>whizbang/checkstyle.xml</configLocation>
          <headerLocation>whizbang/LICENSE.txt</headerLocation>
        </configuration>
      </plugin>
    </plugins>
  </reporting>
  <build>
    <extensions>
      <extension>
        <groupId>com.example.whizbang</groupId>
        <artifactId>build-tools</artifactId>
        <version>1.0</version>
      </extension>
    </extensions>
  </build>
  <modules>
    <module>build-tools</module>
    <module>core</module>
    <module>jmx</module>
    <module>gui</module>
  </modules>
</project>
+-----+

  Once you are done with that, ensure that you do not include maven-checkstyle-plugin in your sub modules, as their definition
  and configuration, will override the top level parent pom's definition.

  Based on the Checkstyle plugin configuration above, the values of <<<configLocation>>> and <<<headerLocation>>> will be resolved
  from the classpath. The build-tools jar was included in the classpath when it was declared as an extension of the project.

  <<Note:>> For the classpath reference, the build-tools was referred to as an extension and not as a plugin
  dependency. This is due to the fact that if it is declared as a plugin dependency, Maven will not download it from the
  internal repository and would just look for it in ibiblio.

  Lastly, kick off a build of the site.

+-----+
mvn site
+-----+

  Every sub project will use the same Checkstyle setup and configuration.
