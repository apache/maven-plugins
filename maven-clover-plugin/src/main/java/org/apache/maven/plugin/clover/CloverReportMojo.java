/*
 * Copyright 2001-2006 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.maven.plugin.clover;

import com.cenqua.clover.reporters.html.HtmlReporter;
import com.cenqua.clover.CloverMerge;

import org.apache.maven.artifact.handler.ArtifactHandler;
import org.apache.maven.project.MavenProject;
import org.apache.maven.reporting.AbstractMavenReport;
import org.apache.maven.reporting.MavenReportException;
import org.codehaus.doxia.sink.Sink;
import org.codehaus.doxia.site.renderer.SiteRenderer;

import java.io.File;
import java.util.*;

/**
 * Generate a <a href="http://cenqua.com/clover">Clover</a> report from existing Clover databases. The generated report
 * is an external report generated by Clover itself. If the project generating the report is a top level project and
 * if the <code>aggregate</code> configuration element is set to true then an aggregated report will also be created.
 *
 * Note: This report mojo should be an @aggregator and the <code>clover:aggregate</code> mojo shouldn't exist. This
 * is a limitation of the site plugin which doesn't support @aggregator reports...
 *
 * @goal clover
 *
 * @author <a href="mailto:vmassol@apache.org">Vincent Massol</a>
 * @version $Id$
 */
public class CloverReportMojo extends AbstractMavenReport
{
    // TODO: Need some way to share config elements and code between report mojos and main build
    // mojos. See http://jira.codehaus.org/browse/MNG-1886

    /**
     * The location of the <a href="http://cenqua.com/clover/doc/adv/database.html">Clover database</a>.
     *
     * @parameter expression="${project.build.directory}/clover/clover.db"
     * @required
     */
    private String cloverDatabase;

    /**
     * The location of the merged clover database to create when running a report in a multimodule build.
     *
     * @parameter expression="${project.build.directory}/clover/cloverMerge.db"
     * @required
     */
    private String cloverMergeDatabase;

    /**
     * The directory where the Clover report will be generated.
     *
     * @parameter expression="${project.reporting.outputDirectory}/clover"
     * @required
     */
    private File outputDirectory;

    /**
     * When the Clover Flush Policy is set to "interval" or threaded this value is the minimum
     * period between flush operations (in milliseconds).
     *
     * @parameter default-value="500"
     */
    protected int flushInterval;

    /**
     * If true we'll wait 2*flushInterval to ensure coverage data is flushed to the Clover
     * database before running any query on it.
     *
     * Note: The only use case where you would want to turn this off is if you're running your
     * tests in a separate JVM. In that case the coverage data will be flushed by default upon
     * the JVM shutdown and there would be no need to wait for the data to be flushed. As we
     * can't control whether users want to fork their tests or not, we're offering this parameter
     * to them.
     *
     * @parameter default-value="true"
     */
    protected boolean waitForFlush;

    /**
     * @component
     */
    private SiteRenderer siteRenderer;

    /**
     * The Maven project.
     *
     * @parameter expression="${project}"
     * @required
     * @readonly
     */
    private MavenProject project;

    /**
     * The projects in the reactor for aggregation report.
     *
     * @parameter expression="${reactorProjects}"
     * @readonly
     */
    private List reactorProjects;

    /**
     * @see org.apache.maven.reporting.AbstractMavenReport#executeReport(java.util.Locale)
     */
    public void executeReport( Locale locale ) throws MavenReportException
    {
        File singleModuleCloverDatabase = new File( this.cloverDatabase );
        if ( singleModuleCloverDatabase.exists() )
        {
            createCloverHtmlReport();
        }

        File mergedCloverDatabase = new File ( this.cloverMergeDatabase );
        if ( mergedCloverDatabase.exists() )
        {
            createMasterCloverHtmlReport();
        }
    }

    /**
     * @todo handle multiple source roots. At the moment only the first source root is instrumented
     */
    private void createCloverHtmlReport() throws MavenReportException
    {
        List parameters = new ArrayList();

        parameters.add( "-t" );
        parameters.add( "Maven Clover report" );
        parameters.add( "-p" );
        parameters.add( this.project.getCompileSourceRoots().get( 0 ) );
        parameters.add( "-i" );
        parameters.add( this.cloverDatabase );
        parameters.add( "-o" );
        parameters.add( this.outputDirectory.getPath() );

        if ( getLog().isDebugEnabled() )
        {
            parameters.add( "-d" );
        }

        int result = HtmlReporter.mainImpl( (String[]) parameters.toArray(new String[0]) );
        if ( result != 0 )
        {
            throw new MavenReportException( "Clover has failed to create the HTML report" );
        }

    }

    private void createMasterCloverHtmlReport() throws MavenReportException
    {
        String[] args = new String[] {
            "-t", "Maven Aggregated Clover report",
            "-i", this.cloverMergeDatabase,
            "-o", this.outputDirectory.getPath() };

        int reportResult = HtmlReporter.mainImpl( args );
        if ( reportResult != 0 )
        {
            throw new MavenReportException( "Clover has failed to create the merged HTML report" );
        }
    }

    public String getOutputName()
    {
        return "clover/index";
    }

    /**
     * @see org.apache.maven.reporting.MavenReport#getDescription(java.util.Locale)
     */
    public String getDescription( Locale locale )
    {
        return getBundle( locale ).getString( "report.clover.description" );
    }

    private static ResourceBundle getBundle( Locale locale )
    {
        return ResourceBundle.getBundle( "clover-report", locale, CloverReportMojo.class.getClassLoader() );
    }

    /**
     * @see org.apache.maven.reporting.AbstractMavenReport#getOutputDirectory()
     */
    protected String getOutputDirectory()
    {
        return this.outputDirectory.getAbsoluteFile().toString();
    }

    /**
     * @see org.apache.maven.reporting.AbstractMavenReport#getSiteRenderer()
     */
    protected SiteRenderer getSiteRenderer()
    {
        return this.siteRenderer;
    }

    /**
     * @see org.apache.maven.reporting.AbstractMavenReport#getProject()
     */
    protected MavenProject getProject()
    {
        return this.project;
    }

    /**
     * @see org.apache.maven.reporting.MavenReport#getName(java.util.Locale)
     */
    public String getName( Locale locale )
    {
        return getBundle( locale ).getString( "report.clover.name" );
    }

    /**
     * @see org.apache.maven.reporting.MavenReport#generate(org.codehaus.doxia.sink.Sink, java.util.Locale)
     */
    public void generate( Sink sink, Locale locale )
        throws MavenReportException
    {
        executeReport( locale );
    }

    /**
     * Always return true as we're using the report generated by Clover rather than creating our own report.
     * @return true
     */
    public boolean isExternalReport()
    {
        return true;
    }

    /**
     * Generate reports if a Clover module database or a Clover merged database exist.
     *
     * @return true if a project should be generated
     * @see org.apache.maven.reporting.AbstractMavenReport#canGenerateReport()
     */
    public boolean canGenerateReport()
    {
        boolean canGenerate = false;

        AbstractCloverMojo.waitForFlush( this.waitForFlush, this.flushInterval );

        File singleModuleCloverDatabase = new File( this.cloverDatabase );
        File mergedCloverDatabase = new File ( this.cloverMergeDatabase );

        if (singleModuleCloverDatabase.exists() || mergedCloverDatabase.exists() )
        {
            canGenerate = true;
        }
        else
        {
            getLog().warn("No Clover database found, skipping report generation");
        }

        return canGenerate;
    }
}
