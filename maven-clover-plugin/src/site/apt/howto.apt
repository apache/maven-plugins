 ------
 Maven 2 Clover Plugin: using
 ------
 Vincent Massol
 <vmassol@apache.org>
 ------
 March 23, 2006

Generating a Clover report

  Add the Clover report in your <<<pom.xml>>> under the <<<reporting>>> section:

+--------
<project>
  [...]
  <reporting>
    <plugins>
      [...]
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clover-plugin</artifactId>
        <configuration>
          [...]
        </configuration>
      </plugin>
    </plugins>
  </reporting>
+---------

  Then, to generate the report simply type <<<mvn site:site>>>. 
  
Checking test coverage

  In order to check for a test coverage percentage and fail the build in case of non-compliance,
  you'll need to configure the Clover plugin to tell it what test coverage threshold you wish to use:
  
+--------
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clover-plugin</artifactId>
        <configuration>
          <targetPercentage>50%</targetPercentage>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
+---------

  In this example we've also bound the <<<check>>> goal to the <<<verify>>> phase which means
  it will be invoked automatically when calling <<<mvn install>>> on your project. You don't need
  to do this and you can also invoke directly the <<<check>>> goal by running <<<mvn clover:check>>>.

Using Clover with JDK 1.4 and JDK 1.5 keywords

  If your code is using JDK 1.4 or JDK 1.5 specific keywords, you'll need to configure the Clover
  plugin. For example for JDK 1.4:
  
+--------
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clover-plugin</artifactId>
        <configuration>
          <jdk>1.4</jdk>
[...]
+---------

Specifying a Clover flush policy

  If you want to specify the Clover 
  {{{http://cenqua.com/clover/doc/adv/flushpolicies.html}flush policy}} that the plugin should use,
  then specify it in the plugin's configuration. Valid policies are <<<threaded>>>, <<<directed>>>
  and <<<interval>>>.
  
  For example to use a <<<threaded>>> policy with a flush interval of <<<5000>>> ms you would write:
  
+--------
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clover-plugin</artifactId>
        <configuration>
          <flushPolicy>threaded</flushPolicy>
          <flushInterval>5000</flushInterval>
[...]
+---------

Specifying a custom license file

  The Clover plugin provides a default evaulation license. However if your project is a commercial project
  you need to purchase your own license to use Clover. To use your license specify it using a
  <<<licenseLocation>>> configuration element. For example if you wanted to automatically execute the
  <<<check>>> goal when you type <<<mvn install>>> and if you wanted to use your license located in
  <<<${basedir}/src/test/clover/myclover.license>>> you would use:

+--------
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clover-plugin</artifactId>
        <configuration>
          <licenseLocation>${basedir}/src/test/clover/myclover.license</licenseLocation>
        </configuration>
        <executions>
          <execution>
            <configuration>
              <targetPercentage>50%</targetPercentage>
            </configuration>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
+---------

  Important note: The <<<licenseLocation>>> element needs to be defined in the global <<<configuration>>> element
  and not in the <<<configuration>>> element under the <<<execution>>> tag.

  Instead of specifying a file, you can also specify either a <<URL>> or a <<relative path inside a JAR>> (to learn
  how to use this last feature, refer to the
  {{{http://maven.apache.org/plugins/maven-checkstyle-plugin/tips.html}Checkstlye plugin documentation}}.
