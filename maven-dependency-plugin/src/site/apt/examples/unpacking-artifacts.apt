  ------
  Unpacking Specific Artifacts
  ------
  Allan Ramirez
  Brian Fox
  ------
  Nov 2006
  ------

Unpacking Specific Artifacts

  This is pretty similar to the {{{copying-artifacts.html}Copying Specific Artifacts}}
  example. The difference is that instead of copying the artifacts, they are unpacked.
  To unpack the copied artifacts, use the <<<dependency:unpack>>> mojo and
  configure the plugin into something like the sample below:

+---+
 <project>
   [...]
   <build>
    <plugins>
      <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-dependency-plugin</artifactId>
         <executions>
           <execution>
             <id>unpack</id>
             <phase>package</phase>
             <goals>
               <goal>unpack</goal>
             </goals>
             <configuration>
               <artifactItems>
                 <artifactItem>
                   <groupId>junit</groupId>
                   <artifactId>junit</artifactId>
                   <version>3.8.1</version>
                   <type>jar</type>
                   <overWrite>false</overWrite>
                   <outputDirectory>${project.build.directory}/alternateLocation</outputDirectory>
                   <destFileName>optional-new-name.jar</destFileName>
                 </artifactItem>
               </artifactItems>
               <outputDirectory>${project.build.directory}/wars</outputDirectory>
               <overWriteReleases>false</overWriteReleases>
               <overWriteSnapshots>true</overWriteSnapshots>
             </configuration>
           </execution>
         </executions>
       </plugin>
     </plugins>
   </build>
   [...]
 </project>
+---+

  And after invoking <<<mvn package>>>, the artifacts are unpacked. Because checking the existence of an unpacked archive
  is difficult to do reliably, marker files are used instead. The location of the marker files is controlled by the {{{unpack-dependencies-mojo.html#markersDirectory}markersDirectory}} parameter.





