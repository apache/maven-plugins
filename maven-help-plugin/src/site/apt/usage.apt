 ------
 Usage
 ------
 John Casey
 Maria Odea Ching
 ------
 2008-08-04
 ------

 ~~ Licensed to the Apache Software Foundation (ASF) under one
 ~~ or more contributor license agreements.  See the NOTICE file
 ~~ distributed with this work for additional information
 ~~ regarding copyright ownership.  The ASF licenses this file
 ~~ to you under the Apache License, Version 2.0 (the
 ~~ "License"); you may not use this file except in compliance
 ~~ with the License.  You may obtain a copy of the License at
 ~~
 ~~   http://www.apache.org/licenses/LICENSE-2.0
 ~~
 ~~ Unless required by applicable law or agreed to in writing,
 ~~ software distributed under the License is distributed on an
 ~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~~ KIND, either express or implied.  See the License for the
 ~~ specific language governing permissions and limitations
 ~~ under the License.

Usage

 Below are the different goals and configurations of the Help plugin.


* The <<<help:active-profiles>>> Mojo

  The <<<active-profiles>>> mojo is used to discover which profiles have been applied to the projects currently being built.
  For each project in the build session, it will output a list of profiles which have been applied to that project, along
  with the source of the profile (POM, <<<settings.xml>>> or <<<profiles.xml>>>).

  You can execute this mojo using the following command:

+-----+
# mvn help:active-profiles
+-----+


* The <<<help:describe>>> Mojo

  The <<<describe>>> mojo is used to discover information about Maven plugins. Given either a <<<plugin>>> or a <<<groupId>>>, an <<<artifactId>>>
  and optionally a <<<version>>>, the mojo will lookup that plugin and output details about it. If the user also specifies
  which <<<mojo>>> to describe, the <<<describe>>> mojo will limit output to the details of that mojo, including parameters.

  This mojo requires either the <<<groupId>>> and <<<artifactId>>> parameters or the <<<plugin>>> parameter to be specified:

+-----+
# mvn help:describe -DgroupId=org.somewhere -DartifactId=some-plugin -Dversion=0.0.0
+-----+

 or

+-----+
# mvn help:describe -Dplugin=org.somewhere:some-plugin:0.0.0
+-----+

 Here is an example with the <<<mojo>>> parameter specified:

+-----+
# mvn help:describe -Dplugin=org.apache.maven.plugins:maven-help-plugin -Dmojo=describe
+-----+

 <<Note:>> <<<version>>> is always optional here.

 You could also asking for a single Maven command, i.e. a goal, a phase or a lifecycle:

+-----+
# mvn help:describe -Dcmd=clean
...
[INFO] [help:describe]
[INFO] 'clean' is a lifecycle with the following phases:
* pre-clean: NOT DEFINED
* clean: org.apache.maven.plugins:maven-clean-plugin:clean
* post-clean: NOT DEFINED
...
+-----+

or

+-----+
# mvn help:describe -Dcmd=compile
...
[INFO] [help:describe]
[INFO] 'compile' is a phase corresponding to this plugin:
org.apache.maven.plugins:maven-compiler-plugin:compile

It is a part of the lifecycle for the POM packaging 'jar'. This lifecycle includes the following phases:
* validate: NOT DEFINED
* initialize: NOT DEFINED
* generate-sources: NOT DEFINED
* process-sources: NOT DEFINED
* generate-resources: NOT DEFINED
* process-resources: org.apache.maven.plugins:maven-resources-plugin:resources
* compile: org.apache.maven.plugins:maven-compiler-plugin:compile
* process-classes: NOT DEFINED
* generate-test-sources: NOT DEFINED
* process-test-sources: NOT DEFINED
* generate-test-resources: NOT DEFINED
* process-test-resources: org.apache.maven.plugins:maven-resources-plugin:testResources
* test-compile: org.apache.maven.plugins:maven-compiler-plugin:testCompile
* process-test-classes: NOT DEFINED
* test: org.apache.maven.plugins:maven-surefire-plugin:test
* package: org.apache.maven.plugins:maven-jar-plugin:jar
* pre-integration-test: NOT DEFINED
* integration-test: NOT DEFINED
* post-integration-test: NOT DEFINED
* verify: NOT DEFINED
* install: org.apache.maven.plugins:maven-install-plugin:install
* deploy: org.apache.maven.plugins:maven-deploy-plugin:deploy
...
+-----+

or

+-----+
# mvn help:describe -Dcmd=compiler:compile
...
[INFO] [help:describe]
[INFO] 'compiler:compile' is a plugin.
Plugin: 'org.apache.maven.plugins:maven-compiler-plugin:2.0.2'
-----------------------------------------------
Group Id:  org.apache.maven.plugins
Artifact Id: maven-compiler-plugin
Version:     2.0.2
Goal Prefix: compiler
Description:

Maven Plugins
...
+-----+

* The <<<help:effective-pom>>> Mojo

  The <<<effective-pom>>> mojo is used to make visible the POM that results from the application of interpolation, inheritance
  and active profiles. It provides a useful way of removing the guesswork about just what ends up in the POM that Maven uses
  to build your project. It will iterate over all projects in the current build session, printing the effective POM for each.

  The mojo can be executed using the following command:

+-----+
# mvn help:effective-pom
+-----+


* The <<<help:effective-settings>>> Mojo

  The <<<effective-settings>>> mojo is used to view the settings that Maven actually uses to run the build. These settings
  are a result of merging the global file with the user's file, with the user's file taking precedence.

  The mojo can be executed using the following command:

+-----+
# mvn help:effective-settings
+-----+

* The <<<help:system>>> Mojo

  The <<<system>>> mojo is used to view the system informations like system properties and environment variables.

  The mojo can be executed using the following command:

+-----+
# mvn help:system
+-----+

* Redirecting output to a file

  All the mojos listed above can use the optional <<<output>>> parameter to
  divert the output to a file. Here is an example of that:

+-----+
# mvn help:active-profiles -Doutput=/path/to/file
+-----+

* Display the Plugin expressions used by Maven

  All mojos could use some expressions given by Maven. To list them, just call:

+-----+
# mvn help:expressions
...
[INFO] [help:expressions]
[INFO] Maven supports the following Plugin expressions:

${project}: No description available.

${settings}: No description available.

${session}: No description available.

${plugin}: No description available.

${rootless}: No description available.

${settings.interactiveMode}: If false, flags the system to skip prompting the
user for any information, or holding up the build waiting for any input. NOTE:
It's also possible to switch to batch (ie. non-interactive) mode using the '-B'
command-line option.
...
+-----+

* Display all profiles used by Maven

+-----+
# mvn help:all-profiles
+-----+
