 ------
 Installing Artifacts Example
 ------
 Paul Gier
 ------
 22 April 2008
 ------

Example using postBuildHookScript
 
  Here is an example of how the Invoker Plugin can be used to run a set
  of Maven projects and then verify their output with a BeanShell script.
  The name of the script file in this case is <<<verify.bsh>>>.

-------------------
<project>
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-invoker-plugin</artifactId>
        <version>1.2</version>
        <executions>
          <execution>
            <id>integration-test</id>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <debug>true</debug>
              <projectsDirectory>src/it</projectsDirectory>
              <pomIncludes>
                <pomInclude>**/pom.xml</pomInclude>
              </pomIncludes>
              <pomExcludes>
                <pomExclude>**/child*/pom.xml</pomExclude>
                <pomExclude>**/module*/pom.xml</pomExclude>
              </pomExcludes>
              <postBuildHookScript>verify.bsh</postBuildHookScript>
            </configuration>
          </execution>
       </executions>
      </plugin>
    </plugins>
  </build>
</project>
-------------------

  Here is an example post build script (<<<verify.bsh>>>) that checks for the existence 
  of a jar file after the build has run.  If the jar file does not exist, the
  script returns <<<false>>> which causes the Invoker Plugin to log that the build failed.
  The global variable <<<basedir>>> of type <<<java.io.File>>> can be used to refer to the
  base directory of the current integration test.
          
-------------------
import java.io.*;

try
{
    File file = new File( basedir, "target/my-test-project-1.0-SNAPSHOT.jar" );
    if ( !file.isFile() )
    {
        System.err.println( "Could not find generated jar: " + file );
        return false;
    }
}
catch( Throwable t )
{
    t.printStackTrace();
    return false;
}

return true;
-------------------

