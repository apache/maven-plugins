 ------
 Maven 2 JAR Plugin
 ------

How to use

 Brief examples on how to use the jar:jar, jar:sign and jar:sign-verify goals.
 
* How to use jar:jar

  If the packaging of your project is set to 'jar', this plugin is executed
  whenever it passes the "package" phase. Have it executed
  using the command below from your project:

-------------------
  mvn package
-------------------

  From your project's target directory you'll able to see the generated jar file.


* Manifest customization

  By default a manifest will contain something like the following

-------------------
  Manifest-Version: 1.0
  Built-By: ${user.name}
  Created-By: Apache Maven
  Build-Jdk: ${java.version}
  Extension-Name: ${project.artifactId}
  Specification-Vendor: ${project.organization.name}
  Implementation-Vendor: ${project.organization.name}
  Implementation-Title: ${project.description}
  Implementation-Version: ${project.version}
-------------------

  Configuration can be done using the <<<archive>>> element. See the
  {{{http://maven.apache.org/ref/current/maven-archiver/apidocs/org/apache/maven/archiver/MavenArchiveConfiguration.html}maven archive reference}}.

-------------------
  <configuration>
    <archive>
      <index>true</index>
      <manifest>
        <addClasspath>true</addClasspath>
      </manifest>
      <manifestEntries>
        <mode>development</mode>
        <url>${pom.url}</url>
        <key>value</key>
      </manifestEntries>
    </archive>
  </configuration>
-------------------


* How to configure jar:sign using pom.xml

  If you need to sign a jar, when using the 'jar' packaging, you just need to configure
  the sign goal appropriately for the signing to occur automatically during the package phase.

  Note that you can automatically verify a jar after signing it.

-------------------
<project>
  ...
  <packaging>jar</packaging>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <executions>
           <execution>
              <goals>
                 <goal>sign</goal>
              </goals>
           </execution>
        </executions>
        <configuration>
           <keystore>/path/to/your/keystore</keystore>
           <alias>youralias</alias>
           <storepass>yourstorepassword</storepass>
           <!--signedjar>${project.build.directory}/signed/${project.build.finalName}.jar</signedjar-->
           <verify>true</verify>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
-------------------

  If you do not specify the signedjar file, your jar will be signed in-place.
  If you do specify it, the program will attempt to create the resulting containing directory.

* How to use jar:sign specifying parameters on the command line

-------------------
  mvn jar:sign -Dkeystore=/path/to/your/keystore -Dstorepass=yourstorepassword -Dalias=youralias
-------------------

* How to use jar:sign-verify specifying parameters on the command line

-------------------
  mvn jar:sign-verify [-Djarpath=/path/to/your/signedjar] [-Dverbose=true [-Dcheckcerts=true] ]
-------------------

* How to disable jar signing

-------------------
  mvn ... -Dmaven.jar.skip.sign=true
-------------------

  For full documentation, click {{{index.html}here}}.
