 ------
 Configuring Javadoc Report
 ------
 Vincent Siveton
 ------
 01 March 2005
 ------

How To Use

 The javadoc plugin can be used by itself by executing the following:

--------------------
mvn javadoc:javadoc

        or

mvn javadoc:jar
--------------------

 It can also be included in the site generation. To do so, the plugin configuration must be placed in the
 reporting section of the pom.


Javadoc Plugin Configuration

 To generate the project javadocs as part of the site generation, add configuration
 similar to the following to your POM:

-------------------
<project>
  ...
  <reporting>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          <minmemory>128m</minmemory>
          <maxmemory>512</maxmemory>
          ...
        </configuration>
      </plugin>
    </plugins>
  ...
  </reporting>
  ...
</project>
------------------

 To generate output from an alternate doclet in addition to the project javadocs, add configuration
 similar to the following to your POM:

------------------
<project>
   ...
   <reporting>
      <plugins>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-javadoc-plugin</artifactId>
            <reportSets>
               <reportSet>
                  <id>uml</id>
                  <configuration>
                     <doclet>gr.spinellis.umlgraph.doclet.UmlGraph</doclet>
                     <docletArtifact>
                        <groupId>umlgraph</groupId>
                        <artifactId>UMLGraph</artifactId>
                        <version>4.2-SNAPSHOT</version>
                     </docletArtifact>
                     <additionalparam>-views</additionalparam>
                     <destDir>target/uml</destDir>
                     <show>private</show>
                  </configuration>
                  <reports>
                     <report>javadoc</report>
                  </reports>
               </reportSet>
               <reportSet>
                  <id>html</id>
                  <configuration>
                     <show>private</show>
                  </configuration>
                  <reports>
                     <report>javadoc</report>
                  </reports>
               </reportSet>
            </reportSets>
         </plugin>
         ...
      </plugins>
   </reporting>
   ...
</project>
------------------

  The configuration within <reporting> is not used when javadoc is explicitly invoked
  via 'mvn javadoc:javadoc'.  To configure explicit invocation, use the <build> element instead:

-------------------
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          <minmemory>128m</minmemory>
          <maxmemory>512</maxmemory>
          ...
        </configuration>
      </plugin>
    </plugins>
  ...
  </build>
  ...
</project>
-------------------

Specific configuration for some Javadoc options

 Some Javadoc options have a specific configuration. Add similar configuration to your POM:

*group

-------------------
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          ...
          <groups>
            <group>
              <title>Core Packages</title>
              <packages>org.apache.maven.plugin.javadoc.test1</packages>
            </group>
            <group>
              <title>Extension Packages</title>
              <packages>org.apache.maven.plugin.javadoc.test2</packages>
            </group>
          </groups>
          ...
        </configuration>
      </plugin>
    </plugins>
  ...
  </build>
  ...
</project>
-------------------

*tag

-------------------
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          ...
          <tags>
            <tag>
              <name>todo</name>
              <!-- Should be a combinaison of the letters Xaoptcmf -->
              <placement>a</placement>
              <head>To do something:</head>
            </tag>
          </tags>
          ...
        </configuration>
      </plugin>
    </plugins>
  ...
  </build>
  ...
</project>
-------------------

*excludePackageNames

-------------------
The excludePackageNames parameter accepts wildcard (*) characters in its value:

<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          ...
          <excludePackageNames>*.internal:org.apache.maven.plugin.javadoc.exclude1.*:org.apache.maven.plugin.javadoc.exclude2</excludePackageNames>          
          ...
        </configuration>
      </plugin>
    </plugins>
  ...
  </build>
  ...
</project>
-------------------

*stylesheet and stylesheetfile

-------------------
If no custom stylesheet is specified in the "stylesheetfile" parameter, the stylesheet parameter will indicate
which stylesheet will be used--the stylesheet included in the maven javadoc plugin or the default stylesheet used by
the javadoc tool. "maven" indicates the maven javadoc plugin stylesheet, while "java" indicates the default javadoc
tool stylesheet. It defaults to "java" if no value is indicated.

<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          ...
          <stylesheet>maven</stylesheet>
          ...
        </configuration>
      </plugin>
    </plugins>
  ...
  </build>
  ...
</project>
-------------------

*aggregate

-------------------
The aggregate parameter can be used to generate javadocs for multi-module projects. It gives the option to
generate 1 javadoc report for the whole project (all modules) or generate 1 javadoc report for each module.

For example, you have the following directory structure:
+-Project
  +-Module1
  +-Module2
  +-Module3

When you execute javadoc from Project directory with aggregate set to "true", a javadoc report will be created
in the target directory of Project wherein all the javadocs of Project's modules are included. If aggregate is
set to false, a javadoc report for Module1 will be generated in the target directory of Module1, a javadoc
report for Module2 will be generated in the target directory of Module2, and a javadoc report for Module3 will be
generated in the target directory of Module3.

<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          ...
          <aggregate>true</aggregate>
          ...
        </configuration>
      </plugin>
    </plugins>
  ...
  </build>
  ...
</project>
-------------------
