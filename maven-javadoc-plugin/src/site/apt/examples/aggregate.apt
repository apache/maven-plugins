 ------
 Aggregating Javadocs for Multi-Projects
 ------
 Maria Odea Ching
 Vincent Siveton
 ------
 2009-02-28
 ------

~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/doxia/references/apt-format.html

Aggregating Javadocs For Multi-Projects

 For example, consider the following directory structure:

+-----+

Project
  |-- pom.xml
  |-- Module1
  |   `-- pom.xml
  |-- Module2
  |   `-- pom.xml
  `-- Module3
    `-- pom.xml

+-----+

* Using The \<aggregate\> Parameter

 The \<aggregate/\> parameter can be used to generate javadocs for multi-module projects. It gives the option to
 generate one javadoc report for the entire project (all modules) or generate one javadoc report for each module.

 When you execute javadoc:javadoc from Project directory with aggregate set to <<true>>, a javadoc report will be created
 in the target directory of Project with all the javadocs of Project's modules included. If aggregate is
 set to <<false>> (default), a javadoc report for Module1 will be generated in the target directory of Module1, a javadoc
 report for Module2 will be generated in the target directory of Module2, and a javadoc report for Module3 will be
 generated in the target directory of Module3.

+-----+
<project>
  ...
  <reporting>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          ...
          <aggregate>true</aggregate>
          ...
        </configuration>
      </plugin>
    </plugins>
    ...
  </reporting>
  ...
</project>
+-----+

* Using The \<aggregate\> Goal

 The \<aggregate/\> parameter doesn't include generate source directories defined using the
 {{{http://mojo.codehaus.org/build-helper-maven-plugin/add-source-mojo.html}build-helper:add-source}}. In this case,
 you need to use the <<<aggregate>>> goal and <<<test-aggregate>>> goals. You could also define several \<reportSet/\>
 like the following:

+-----+

<project>
  ...
  <reporting>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <reportSets>
          <reportSet>
            <id>non-aggregate</id>
            <configuration>
              ...
            </configuration>
            <reports>
              <report>javadoc</report>
            </reports>
          </reportSet>
          <reportSet>
            <id>aggregate</id>
            <configuration>
              ...
            </configuration>
            <reports>
              <report>aggregate</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
    </plugins>
  </reporting>
  ...
</project>
+-----+

Using \<aggregate\> Goals

 The plugin contains several \<aggregate/\> goals to be use with an aggregator project:

   * <<<aggregate>>> goal to generate the Javadoc files.

   * <<<test-aggregate>>> goal to generate the test Javadoc files.

   * <<<aggregate-jar>>> goal to create an archive file of the Javadoc files.

   * <<<test-aggregate>>> goal to create an archive file of the test Javadoc files.

   []
