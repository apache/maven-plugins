 ------
 Fixing Javadoc Comments
 ------
 Vincent Siveton
 ------
 2009-02-22
 ------

~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/doxia/references/apt-format.html

Fixing Javadoc Comments

 When developers write code, they could forget to create (or update) the Javadoc comments. The <fix> and <test-fix>
 goals are interactive goals to fix the actual Javadoc comments.

 You need to call <mvn javadoc:fix> to fix main Java source files (i.e. inside src/main/java directory) or
 <mvn javadoc:test-fix> to fix test Java source files (i.e. inside src/test/java directory).

 <<Important Note>>: Since the changes are done <<directly>> in the source code, we recommend <<strongly>> the use of
 a SCM, so you could always do a revert if a problem occurs.

* Feature Summary

 The user could skip the class/field/method Javadoc fixing using specific parameters, i.e.
 {{{../fix-mojo.html#fixClassComment}fixClassComment}}.
 Also, the user could specify a {{{../fix-mojo.html#level}level}}, i.e. public, to fix only class/field/method with
 the given level.

 These goals could fix dynamically all Javadoc tags (by default, see {{{../fix-mojo.html#fixTags}fixTags}}) or
 selective tags like author, version...
 Also, the user could specify default value for some tags, i.e. {{{../fix-mojo.html#defaultAuthor}defaultAuthor}}.

 The <javadoc:fix> goal could use {{{http://clirr.sourceforge.net/}Clirr}}, a tool that checks Java libraries for
 binary and source compatibility with older releases. So, the <@since> tags will be dynamically added for the current
 project version. You need to add the <comparisonVersion> parameter.

 Finally, the user could process specific Java files using the
 {{{../fix-mojo.html#includes}includes}}/{{{../fix-mojo.html#excludes}excludes}} parameters.

* Example Call

+-----+
mvn org.apache.maven.plugins:maven-javadoc-plugin:2.6:fix -DcomparisonVersion=1.0
...
[INFO] [javadoc:fix]
[WARNING]
[WARNING]     WARRANTY DISCLAIMER
[WARNING]
[WARNING] All warranties with regard to this Maven goal are disclaimed!
[WARNING] The changes will be done directly in the source code.
[WARNING] The Maven Team strongly recommends the use of a SCM software BEFORE executing this goal.
[WARNING]
[INFO] Are you sure to proceed? [Y]es [N]o
y
[INFO] OK, let's proceed...
[debug] Comparing to <groupId>:<artifactId>:1.0:null:jar
[INFO] Clirr found Api differences.
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
...
+-----+

  You could review the changes and commit.
