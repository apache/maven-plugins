package org.apache.maven.plugin.pmd;

/*
 * Copyright 2001-2006 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Map;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.codehaus.plexus.util.xml.pull.MXParser;
import org.codehaus.plexus.util.xml.pull.XmlPullParser;
import org.codehaus.plexus.util.xml.pull.XmlPullParserException;

/**
 * Base class for mojos that check if there were any PMD violations.
 * 
 * @author <a href="mailto:brett@apache.org">Brett Porter</a>
 */
public abstract class AbstractPmdViolationCheckMojo
    extends AbstractMojo
{
    /**
     * The location of the XML report to check, as generated by the PMD report.
     * 
     * @parameter expression="${project.build.directory}"
     * @required
     */
    private File targetDirectory;

    /**
     * Whether to fail the build if the validation check fails.
     * 
     * @parameter expression="${pmd.failOnViolation}" default-value="true"
     * @required
     */
    private boolean failOnViolation;

    /**
     * The project language, for determining whether to run the report.
     * 
     * @parameter expression="${project.artifact.artifactHandler.language}"
     * @required
     * @readonly
     */
    private String language;

    /**
     * The project source directory.
     * 
     * @parameter expression="${project.build.sourceDirectory}"
     * @required
     * @readonly
     */
    private File sourceDirectory;

    /**
     * Print details of check failures to build output
     * 
     * @parameter expression="${pmd.verbose}" default-value="false"
     */
    private boolean verbose;

    protected void executeCheck( String filename, String tagName, String key )
        throws MojoFailureException, MojoExecutionException
    {
        if ( "java".equals( language ) && sourceDirectory.exists() )
        {
            File outputFile = new File( targetDirectory, filename );
            if ( outputFile.exists() )
            {
                try
                {
                    XmlPullParser xpp = new MXParser();
                    FileReader freader = new FileReader( outputFile );
                    BufferedReader breader = new BufferedReader( freader );
                    xpp.setInput( breader );

                    int violations = countViolations( xpp, tagName );
                    if ( violations > 0 )
                    {
                        String message = "You have " + violations + " " + key + ( violations > 1 ? "s" : "" )
                            + " For more details see:" + outputFile.getAbsolutePath();

                        if ( failOnViolation )
                        {
                            throw new MojoFailureException( message );
                        }
                        else
                        {
                            this.getLog().info( message );
                        }
                    }
                }
                catch ( IOException e )
                {
                    throw new MojoExecutionException(
                                                      "Unable to read PMD results xml: " + outputFile.getAbsolutePath(),
                                                      e );
                }
                catch ( XmlPullParserException e )
                {
                    throw new MojoExecutionException(
                                                      "Unable to read PMD results xml: " + outputFile.getAbsolutePath(),
                                                      e );
                }
            }
            else
            {
                throw new MojoFailureException( "Unable to perform check, " + "unable to find " + outputFile );
            }
        }
    }

    /**
     * Method for counting the number of violations found by the PMD tool
     * 
     * @param xpp
     *            the xml parser object
     * @param tagName
     *            the element that will be checked
     * @return an int that specifies the number of violations found
     * @throws XmlPullParserException
     * @throws IOException
     */
    private int countViolations( XmlPullParser xpp, String tagName )
        throws XmlPullParserException, IOException
    {
        int count = 0;
        int eventType = xpp.getEventType();

        while ( eventType != XmlPullParser.END_DOCUMENT )
        {
            if ( eventType == XmlPullParser.START_TAG && tagName.equals( xpp.getName() ) )
            {
                count++;

                if ( verbose )
                {
                    //separate methods setup to support 2 levels: warn and fail by priority
                    printError(getErrorDetails(xpp));   
                }
            }

            eventType = xpp.next();

        }

        return count;
    }

    /**
     * Formats the failure details and prints them as an INFO message
     * 
     * @param item
     */
    abstract protected void printError( Map item );

    /**
     * Gets the attributes and text for the violation tag and puts them in a
     * HashMap
     * 
     * @param xpp
     * @throws XmlPullParserException
     * @throws IOException
     */
    abstract protected Map getErrorDetails( XmlPullParser xpp )
        throws XmlPullParserException, IOException;
}
