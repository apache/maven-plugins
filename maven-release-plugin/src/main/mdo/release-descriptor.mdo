<model>
  <id>release-descriptor</id>
  <name>ReleaseDescriptor</name>
  <description>
    A release descriptor contains everything that is needed to perform a
    release. A release descriptor can be used by third party systems like
    Continuum to perform releases in a consistent way. The release model could also
    be deployed to the repository manager so that new releases can be announced easily
    and automatically.
  </description>
  <defaults>
    <default>
      <key>package</key>
      <value>org.apache.maven.plugins.release.config</value>
    </default>
  </defaults>
  <classes>
    <class rootElement="true">
      <name>ReleaseDescriptor</name>
      <version>1.0.0+</version>
      <fields>
        <!-- Descriptive Information -->
        <field>
          <name>name</name>
          <version>1.0.0</version>
          <type>String</type>
          <description>
            The name of this release configuration
          </description>
        </field>
        <field>
          <name>description</name>
          <version>1.0.0</version>
          <type>String</type>
          <description>
            The description of this release configuration
          </description>
        </field>
        <!-- Settings needs to be resolved -->
        <!-- SCM Information -->
        <field>
          <name>scmSourceUrl</name>
          <version>1.0.0</version>
          <type>String</type>
          <description>
            This is a MavenSCM of where you're going to get the sources to make the release with.
            Example: scm:svn:https://svn.apache.org/repos/asf/maven/plugins/trunk/maven-release-plugin
          </description>
        </field>
        <field>
          <name>scmTagBase</name>
          <version>1.0.0</version>
          <type>String</type>
          <description>
            Where you are going to put your tagged sources
            Example https://svn.apache.org/repos/asf/maven/plugins/tags
          </description>
        </field>
        <field>
          <name>scmReleaseLabel</name>
          <version>1.0.0</version>
          <type>String</type>
          <description>
            tag name: the identifier for the tag.
            Example: maven-release-plugin-2.0
          </description>
        </field>
        <field>
          <name>scmUsername</name>
          <version>1.0.0</version>
          <type>String</type>
          <description>
            The user name to interact with the scm
          </description>
        </field>
        <field>
          <name>scmPassword</name>
          <version>1.0.0</version>
          <type>String</type>
          <description>
            The password for the user interacting with the scm
          </description>
        </field>
        <field>
          <name>scmPrivateKey</name>
          <version>1.0.0</version>
          <type>String</type>
          <description>
            Private key for an SSH based SCM repository.
          </description>
        </field>
        <field>
          <name>scmPrivateKeyPassPhrase</name>
          <version>1.0.0</version>
          <type>String</type>
          <description>
            Pass phrase for the private key.
          </description>
        </field>
        <field>
          <name>scmUseEditMode</name>
          <version>1.0.0</version>
          <type>boolean</type>
          <description>
            Whether to use edit mode when making SCM modifications. This setting is disregarded
            if the SCM does not support edit mode, or if edit mode is compulsory for the given SCM.
          </description>
        </field>
        <!-- Maven Information -->
        <field>
          <name>releaseVersions</name>
          <version>1.0.0</version>
          <type>Map</type>
          <association stash.keyType="String">
            <type>String</type>
            <multiplicity>*</multiplicity>
          </association>
          <description>
            A map of projects to versions to use when releasing the given projects.
          </description>
        </field>
        <field>
          <name>developmentVersions</name>
          <version>1.0.0</version>
          <type>Map</type>
          <association stash.keyType="String">
            <type>String</type>
            <multiplicity>*</multiplicity>
          </association>
          <description>
            A map of projects to versions to use when moving the given projects back into devlopment after release.
          </description>
        </field>
        <field>
          <name>originalScmInfo</name>
          <version>1.0.0</version>
          <type>Map</type>
          <association stash.keyType="String">
            <type>String</type>
            <multiplicity>*</multiplicity>
          </association>
          <description>
            A map of projects to original SCM information.
          </description>
        </field>
        <field>
          <name>workingDirectory</name>
          <version>1.0.0</version>
          <type>String</type>
          <description>
            The directory where the release is performed.
          </description>
        </field>
        <field>
          <name>completedPhase</name>
          <version>1.0.0</version>
          <type>String</type>
          <description>
            The last completed phase.
          </description>
        </field>
        <field>
          <name>addSchema</name>
          <version>1.0.0</version>
          <type>boolean</type>
          <description>
            <![CDATA[Whether to add the model schema to the top of the rewritten POM if it wasn't there already.
            If <code>false</code> then the root element will remain untouched.]]>
          </description>
        </field>
        <field>
          <name>generateReleasePoms</name>
          <version>1.0.0</version>
          <type>boolean</type>
          <description>
            Whether to generate release POMs.
          </description>
        </field>
        <field>
          <name>interactive</name>
          <version>1.0.0</version>
          <type>boolean</type>
          <defaultValue>true</defaultValue>
          <description>
            Whether the release process is interactive and the release manager should be prompted to
            confirm values, or whether the defaults are used regardless.
          </description>
        </field>
        <field>
          <name>additionalArguments</name>
          <version>1.0.0</version>
          <type>String</type>
          <description>
            Additional arguments to pass to any executed Maven process.
          </description>
        </field>
        <field>
          <name>pomFileName</name>
          <version>1.0.0</version>
          <type>String</type>
          <description>
            The file name of the POM to pass to any executed Maven process.
          </description>
        </field>
        <field>
          <name>preparationGoals</name>
          <version>1.0.0</version>
          <type>String</type>
          <description>
            The goals to execute in preparation for the release.
          </description>
        </field>

        <!-- Announcement Information

        Announcement related info, this can be a second part of the process.

        o anything that might be of interest in the release
          o issue management urls
          o new content
          o announcement text

        -->
      </fields>

      <!-- Code Segments -->
      <codeSegments>
        <codeSegment>
          <version>1.0.0</version>
          <code><![CDATA[
    /**
     * Map a given project to a specified version from when it is released.
     *
     * @param projectId   the project's group and artifact ID
     * @param nextVersion the version to map to
     */
    public void mapReleaseVersion( String projectId, String nextVersion )
    {
        if (releaseVersions == null) {
            releaseVersions = new java.util.HashMap();
        } else {
            assert !releaseVersions.containsKey( projectId );
        }

        releaseVersions.put( projectId, nextVersion );
    }

    /**
     * Map a given project to a specified version from when it is incremented and placed back into development.
     *
     * @param projectId   the project's group and artifact ID
     * @param nextVersion the version to map to
     */
    public void mapDevelopmentVersion( String projectId, String nextVersion )
    {
        if (developmentVersions == null) {
            developmentVersions = new java.util.HashMap();
        } else {
            assert !developmentVersions.containsKey( projectId );
        }

        developmentVersions.put( projectId, nextVersion );
    }

    /**
     * Map a given project to a specified set of SCM information.
     *
     * @param projectId the project's group and artifact ID
     * @param scm       the original SCM information to store
     */
    public void mapOriginalScmInfo( String projectId, org.apache.maven.model.Scm scm )
    {
        if (originalScmInfo == null) {
            originalScmInfo = new java.util.HashMap();
        } else {
            assert !originalScmInfo.containsKey( projectId );
        }

        originalScmInfo.put( projectId, scm );
    }

    /**
     * A map of projects to original versions before any transformation.
     */
    private Map originalVersions;

    /**
     * Retrieve the original version map, before transformation, keyed by project's versionless identifier.
     *
     * @param reactorProjects The reactor projects.
     *
     * @return the map of project IDs to versions.
     */
    public synchronized Map getOriginalVersions(List reactorProjects)
    {
        if ( originalVersions == null )
        {
            originalVersions = new HashMap();
            for ( Iterator i = reactorProjects.iterator(); i.hasNext(); )
            {
                org.apache.maven.project.MavenProject project = (org.apache.maven.project.MavenProject) i.next();
                originalVersions.put( org.apache.maven.artifact.ArtifactUtils.versionlessKey( project.getGroupId(), project.getArtifactId() ),
                                      project.getVersion() );
            }
        }
        return originalVersions;
    }

    public boolean equals( Object obj )
    {
        if ( this == obj )
        {
            return true;
        }
        if ( obj == null || getClass() != obj.getClass() )
        {
            return false;
        }

        ReleaseDescriptor that = (ReleaseDescriptor) obj;

        if ( addSchema != that.addSchema )
        {
            return false;
        }
        if ( generateReleasePoms != that.generateReleasePoms )
        {
            return false;
        }
        if ( interactive != that.interactive )
        {
            return false;
        }
        if ( scmUseEditMode != that.scmUseEditMode )
        {
            return false;
        }
        if ( completedPhase != null ? !completedPhase.equals( that.completedPhase ) : that.completedPhase != null )
        {
            return false;
        }
        if ( ( developmentVersions == null || ( developmentVersions != null && developmentVersions.size() == 0) ) &&
            ( that.developmentVersions == null || ( that.developmentVersions != null && that.developmentVersions.size() == 0) ) ) {
            // Do nothing.  This is a Modello workaround
        } else {
            if ( developmentVersions != null ? !developmentVersions.equals( that.developmentVersions )
                : that.developmentVersions != null )
            {
                return false;
            }
        }
        if ( ( originalScmInfo == null || (originalScmInfo != null && originalScmInfo.size() == 0 ) ) &&
            ( that.originalScmInfo == null || ( that.originalScmInfo != null && that.originalScmInfo.size() == 0 ) ) ) {
            // Do nothing.  This is a Modello workaround
        } else {
            if ( originalScmInfo != null ? !compareScmCollections( that.originalScmInfo ) : that.originalScmInfo != null )
            {
                return false;
            }
        }
        if ( ( releaseVersions == null || ( releaseVersions != null && releaseVersions.size() == 0 ) ) &&
            ( that.releaseVersions == null || ( that.releaseVersions != null && that.releaseVersions.size() == 0 ) ) ) {
            // Do nothing.  This is a Modello workaround
        } else {
            if ( releaseVersions != null ? !releaseVersions.equals( that.releaseVersions ) : that.releaseVersions != null )
            {
                return false;
            }
        }
        if ( additionalArguments != null ? !additionalArguments.equals( that.additionalArguments )
            : that.additionalArguments != null )
        {
            return false;
        }
        if ( preparationGoals != null ? !preparationGoals.equals( that.preparationGoals )
            : that.preparationGoals != null )
        {
            return false;
        }
        if ( pomFileName != null ? !pomFileName.equals( that.pomFileName ) : that.pomFileName != null )
        {
            return false;
        }
        if ( scmPrivateKeyPassPhrase != null ? !scmPrivateKeyPassPhrase.equals( that.scmPrivateKeyPassPhrase ) : that.scmPrivateKeyPassPhrase != null )
        {
            return false;
        }
        if ( scmPassword != null ? !scmPassword.equals( that.scmPassword ) : that.scmPassword != null )
        {
            return false;
        }
        if ( scmPrivateKey != null ? !scmPrivateKey.equals( that.scmPrivateKey ) : that.scmPrivateKey != null )
        {
            return false;
        }
        if ( scmReleaseLabel != null ? !scmReleaseLabel.equals( that.scmReleaseLabel ) : that.scmReleaseLabel != null )
        {
            return false;
        }
        if ( scmTagBase != null ? !scmTagBase.equals( that.scmTagBase ) : that.scmTagBase != null )
        {
            return false;
        }
        if ( scmSourceUrl != null ? !scmSourceUrl.equals( that.scmSourceUrl ) : that.scmSourceUrl != null )
        {
            return false;
        }
        if ( scmUsername != null ? !scmUsername.equals( that.scmUsername ) : that.scmUsername != null )
        {
            return false;
        }
        if ( workingDirectory != null ? !workingDirectory.equals( that.workingDirectory ) : that.workingDirectory != null )
        {
            return false;
        }

        return true;
    }

    private boolean compareScmCollections( Map that )
    {
        // Must manually compare as Scm doesn't have an equals method
        if (that == null && originalScmInfo == null) {
            return true;
        }

        if ( ( that == null && originalScmInfo != null ) || ( that != null && originalScmInfo == null ) ) {
            return false;
        }

        if ( that.size() != originalScmInfo.size() )
        {
            return false;
        }

        for ( Iterator i = originalScmInfo.entrySet().iterator(); i.hasNext(); )
        {
            Map.Entry entry = (Map.Entry) i.next();

            org.apache.maven.model.Scm thatScm = (org.apache.maven.model.Scm) that.get( entry.getKey() );

            org.apache.maven.model.Scm thisScm = (org.apache.maven.model.Scm) entry.getValue();
            if ( thatScm == null && thisScm == null )
            {
                return true;
            }
            else if ( thatScm == null )
            {
                return false;
            }
            else if ( thisScm == null )
            {
                return true;
            }

            if ( thisScm.getConnection() != null ? !thisScm.getConnection().equals( thatScm.getConnection() )
                : thatScm.getConnection() != null )
            {
                return false;
            }
            if ( thisScm.getDeveloperConnection() != null ? !thisScm.getDeveloperConnection().equals(
                thatScm.getDeveloperConnection() ) : thatScm.getDeveloperConnection() != null )
            {
                return false;
            }
            if ( thisScm.getUrl() != null ? !thisScm.getUrl().equals( thatScm.getUrl() ) : thatScm.getUrl() != null )
            {
                return false;
            }
            if ( thisScm.getTag() != null ? !thisScm.getTag().equals( thatScm.getTag() ) : thatScm.getTag() != null )
            {
                return false;
            }
        }

        return true;
    }

    public int hashCode()
    {
        int result = completedPhase != null ? completedPhase.hashCode() : 0;
        result = 29 * result + ( scmReleaseLabel != null ? scmReleaseLabel.hashCode() : 0 );
        result = 29 * result + ( additionalArguments != null ? additionalArguments.hashCode() : 0 );
        result = 29 * result + ( preparationGoals != null ? preparationGoals.hashCode() : 0 );
        result = 29 * result + ( pomFileName != null ? pomFileName.hashCode() : 0 );
        result = 29 * result + ( scmTagBase != null ? scmTagBase.hashCode() : 0 );
        result = 29 * result + ( scmUsername != null ? scmUsername.hashCode() : 0 );
        result = 29 * result + ( scmPassword != null ? scmPassword.hashCode() : 0 );
        result = 29 * result + ( scmSourceUrl != null ? scmSourceUrl.hashCode() : 0 );
        result = 29 * result + ( scmPrivateKey != null ? scmPrivateKey.hashCode() : 0 );
        result = 29 * result + ( scmPrivateKeyPassPhrase != null ? scmPrivateKeyPassPhrase.hashCode() : 0 );
        result = 29 * result + ( workingDirectory != null ? workingDirectory.hashCode() : 0 );
        result = 29 * result + ( scmUseEditMode ? 1 : 0 );
        result = 29 * result + ( addSchema ? 1 : 0 );
        result = 29 * result + ( generateReleasePoms ? 1 : 0 );
        result = 29 * result + ( interactive ? 1 : 0 );
        result = 29 * result + ( releaseVersions != null ? releaseVersions.hashCode() : 0 );
        result = 29 * result + ( developmentVersions != null ? developmentVersions.hashCode() : 0 );
        result = 29 * result + ( originalScmInfo != null ? originalScmInfo.hashCode() : 0 );
        return result;
    }
]]></code>
        </codeSegment>
      </codeSegments>
    </class>
  </classes>
</model>
