
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import java.io.*;
import org.codehaus.plexus.util.*;

boolean result = true;

try
{
    File target = new File( basedir, "target" );
    if ( !target.exists() || !target.isDirectory() )
    {
        System.err.println( "target file is missing or not a directory." );
        return false;
    }
    
    File webappDirectory = new File( target, "MWAR-133-1.0-SNAPSHOT" );
    if ( !webappDirectory.exists() || !webappDirectory.isDirectory() )
    {
        System.err.println( "webappDirectory is missing or not a directory." );
        return false;
    }    
    
    File filtered = new File ( webappDirectory, "filtered.properties" );
    if ( !filtered.exists() || filtered.isDirectory() )
    {
        System.err.println( "filtered.properties file is missing or a directory." );
        return false;
    }    
    System.out.println (" before reading param " );
    FileInputStream fis = new FileInputStream ( filtered );
    String paramContent = IOUtil.toString ( fis );
    
    
    int indexOf = paramContent.indexOf( "app.version=${node.version}" );
    if ( indexOf < 0)
    {
    	System.err.println( "filtered.properties was not filtered with the value of ${node.version}" );
    	return false;
    }
    
}
catch( Throwable e )
{
    e.printStackTrace();
    result = false;
}

return result;
